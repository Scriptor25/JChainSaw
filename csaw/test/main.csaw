num MAX = 4;
num MAX_THREAD = 4;

list matA;
list matB;
list matC;
num step_i = 0;

@multi {
    num i = step_i;
    step_i++;

    for (num j = 0; j < MAX; j++)
        for (num k = 0; k < MAX; k++)
            matC[i].set(j, matC[i][j] + matA[i][k] * matB[k][j]);
}

@main: num {

    matA = list();
    matB = list();
    matC = list();

    for (num i = 0; i < MAX; i++) {
        matA.add(list());
        matB.add(list());
        matC.add(list());
        for (num j = 0; j < MAX; j++) {
            matA[i].add(random() * 10);
            matB[i].add(random() * 10);
            matC[i].add(0);
        }
    }

    out("Matrix A:%n");
    for (num i = 0; i < MAX; i++) {
        for (num j = 0; j < MAX; j++)
            out("%s ", matA[i][j]);
        out("%n");
    }

    out("%nMatrix B:%n");
    for (num i = 0; i < MAX; i++) {
        for (num j = 0; j < MAX; j++)
            out("%s ", matB[i][j]);
        out("%n");
    }

    list threads = list();
    for (num i = 0; i < MAX_THREAD; i++) {
        thrd t = thrd([]() multi());
        threads.add(t);
        t.start();
    }

    for (num i = 0; i < MAX_THREAD; i++)
        threads[i].join();
    
    out("%nMultiplication of A and B:%n");
    for (num i = 0; i < MAX; i++) {
        for (num j = 0; j < MAX; j++)
            out("%s ", matC[i][j]);
        out("%n");
    }

    ret 0;
}
