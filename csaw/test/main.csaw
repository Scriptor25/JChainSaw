thing: pool {
    threads: thrd[10],
    tasks: list,
    worker: thrd,
}

$pool (tasks: list) {
    my.tasks = tasks;
    thrd t = thrd([my]() { while (my.work()); });
    my.worker = t;
    t.start();
}

@work: num -> pool {
    if (my.tasks.empty())
        ret 0;
    
    num i = 10;
    num free = 0;
    while (!free) ## wait for free thread
        for (i = 0; i < 10 && !free; i++)
            free = !my.threads[i].running();
    
    thrd t = thrd(my.tasks.pop());
    my.threads[i] = t;
    t.start();

    ret 1;
}

@join -> pool {
    my.worker.join();
    for (num i = 0; i < 10; i++)
        if (my.threads[i].alive())
            my.threads[i].join();
}

num W = 100;
num H = 100;

@random_color: num {
    num r = floor(255.999 * random());
    num g = floor(255.999 * random());
    num b = floor(255.999 * random());

    ret (255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | (b & 255);
}

@get_xy (i: num, xy: num[2]) {
    xy[1] = floor(i / W);
    xy[0] = (i - xy[1] * W);
}

@run (p: img, i: num) {
    num[2] xy;
    get_xy(i, xy);
    p.set(xy[0], xy[1], random_color());
}

@main: num {

    img p = img(W, H);

    num c = W * H;
    list tasks;

    for (num i = 0; i < c; i++)
        tasks.add([p, i]() run(p, i));
    
    pool t = pool(tasks);
    t.join();

    p.write("png", "output/out.png");

    ret 0;
}
