inc "complex.csaw";

num MAX_ITER = 100;
num SAMPLES  =  10;
num WIDTH    = 512;
num HEIGHT   = WIDTH;

@main: num {

    num xc = num(readf("xc: "));     ## -0.5
    num yc = num(readf("yc: "));     ##    0
    num size = num(readf("size: ")); ##    2

    img output = img(WIDTH, HEIGHT);
    bar b = bar(HEIGHT);

    printf("Starting...");
    for (num j = 0; j < HEIGHT; j++) {
        for (num i = 0; i < WIDTH; i++) {
            num n = 0;
            parallel(0, SAMPLES, [xc, yc, size, j, i, n](s: num) {
                num x0 = xc - size / 2 + size * (i + random() - 0.5) / WIDTH;
                num y0 = yc - size / 2 + size * (j + random() - 0.5) / HEIGHT;
                ## num x0 = xc - size / 2 + size * i / WIDTH;
                ## num y0 = yc - size / 2 + size * j / HEIGHT;
                complex z0 = complex(x0, y0);
                n += mandel(z0, MAX_ITER);
            });
            n = n / (SAMPLES * MAX_ITER);
            num grey = floor(n * 255.999);
            output.set(i, j, 0xff << 24 | (grey & 0xff) << 16 | (grey & 0xff) << 8 | (grey & 0xff));
        }
        b.on_progress();
    }
    printf("\rDone!            %n");

    output.write("png", "output/mandel.png");

    ret 0;
}

@min: num (a: num, b: num) { ret a < b ? a : b; }
@max: num (a: num, b: num) { ret a > b ? a : b; }

@mandel: num (z0: complex, max: num) {
    complex z = z0;
    for (num t = 0; t < max; t++) {
        if (z.abs() > 2.0) ret t;
        z = z.square() + z0;
    }
    ret max;
}

thing: bar {
    progress: num,
    max: num
}

$bar (max: num) {
    my.progress = 0;
    my.max = max;
}

@on_progress -> bar {
    my.progress += 1 / my.max;
    printf("\rProgress: %d%%  ", floor(my.progress * 100));
}
