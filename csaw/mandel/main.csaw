inc "complex.csaw";
inc "pool.csaw";

num MAX_ITER = 100;
num SAMPLES  =  10;
num WIDTH    = 100;
num HEIGHT   = WIDTH;

@main: num {

    num xc = num(readf("xc: "));     ## -0.5
    num yc = num(readf("yc: "));     ##    0
    num size = num(readf("size: ")); ##    2

    img output = img(WIDTH, HEIGHT);
    bar b = bar(WIDTH * HEIGHT);

    list tasks;
    for (num j = 0; j < HEIGHT; j++) {
        for (num i = 0; i < WIDTH; i++) {
            tasks.add([xc, yc, size, output, b, j, i]() {
                num n = 0;
                for (num s = 0; s < SAMPLES; s++) {
                    num x0 = xc - size / 2 + size * (i + random() - 0.5) / WIDTH;
                    num y0 = yc - size / 2 + size * (j + random() - 0.5) / HEIGHT;
                    ## num x0 = xc - size / 2 + size * i / WIDTH;
                    ## num y0 = yc - size / 2 + size * j / HEIGHT;
                    complex z0 = complex(x0, y0);
                    n += mandel(z0, MAX_ITER);
                }
                n = n / (SAMPLES * MAX_ITER);
                num grey = floor(n * 255.999);
                output.set(i, j, 255 << 24 | (grey & 255) << 16 | (grey & 255) << 8 | (grey & 255));

                b.on_progress();
            });
        }
    }

    printf("Starting...");

    pool p = pool(16, tasks);
    p.join();
    
    output.write("png", "output/out.png");

    printf("\rDone!            %n");

    ret 0;
}

@min: num (a: num, b: num) { ret a < b ? a : b; }
@max: num (a: num, b: num) { ret a > b ? a : b; }

@mandel: num (z0: complex, max: num) {
    complex z = z0;
    for (num t = 0; t < max; t++) {
        if (z.abs() > 2.0) ret t;
        z = z.square() + z0;
    }
    ret max;
}

thing: bar {
    progress: num,
    max: num
}

$bar (max: num) {
    my.progress = 0;
    my.max = max;
}

@on_progress -> bar {
    my.progress += 1 / my.max;
    printf("\rProgress: %d%%  ", floor(my.progress * 100));
}
