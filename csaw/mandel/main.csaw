inc "complex.csaw";

str SYMBOLS_HIGH = "@$B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}()?-_+~<>i!lI;:,\"^`'. ";
str SYMBOLS_LOW = "@%#*+=-:. ";
str SYMBOLS = SYMBOLS_HIGH;

num MAX_ITER = 100;
num SAMPLES = 10;
num WIDTH = 512;
num HEIGHT = WIDTH;

@main: num {

    num xc = num(in("xc: "));
    num yc = num(in("yc: "));
    num size = num(in("size: "));

#
    num xc = -0.5;
    num yc = 0;
    num size = 2;
#

    ofstream output = ofstream("out.ppm");
    output.write("P3%n%.0f %.0f%n255%n", WIDTH, HEIGHT);

    for (num j = 0; j < HEIGHT; j++) {
        for (num i = 0; i < WIDTH; i++) {
            num n = 0;
            for (num s = 0; s < SAMPLES; s++) {
                num x0 = xc - size / 2 + size * (i + random() - 0.5) / WIDTH;
                num y0 = yc - size / 2 + size * (j + random() - 0.5) / HEIGHT;
                complex z0 = complex(x0, y0);
                n += mandel(z0, MAX_ITER);
            }
            n = n / (SAMPLES * MAX_ITER);
            ## out("%c", symbol(n));
            num grey = floor(n * 255.999);
            output.write("%.0f %.0f %.0f%n", grey, grey, grey);
        }
        ## out("%n");
    }
    
    output.close();

    ret 0;
}

@min: num (a: num, b: num) { ret a < b ? a : b; }
@max: num (a: num, b: num) { ret a > b ? a : b; }

@symbol: chr (n: num) {
    num length = SYMBOLS.length();
    n = max(min(n * length, length), 0);
    ret SYMBOLS.at(length - n);
}

@mandel: num (z0: complex, max: num) {
    complex z = z0;
    for (num t = 0; t < max; t++) {
        if (z.abs() > 2.0) ret t;
        z = z.square() + z0;
    }
    ret max;
}
