inc "common.csaw";

@main: num {

    num scene = 0;

    if (scene == 0)      simple_scene();
    else if (scene == 1) random_spheres();
    else if (scene == 2) two_spheres();
    else if (scene == 3) earth();
    else if (scene == 4) two_perlin_spheres();
    else if (scene == 5) quads();
    else if (scene == 6) simple_light();
    else if (scene == 7) cornell_box();

    ret 0;
}

@cornell_box {
    hittable_list world = hittable_list();

    material red   = lambertian(color(0.65, 0.05, 0.05));
    material white = lambertian(color(0.73, 0.73, 0.73));
    material green = lambertian(color(0.12, 0.45, 0.15));
    material light = diffuse_light(color(15, 15, 15));

    world.add(quad(point3(555,0,0),       vec3(0,555,0),  vec3(0,0,555),  green));
    world.add(quad(point3(0,0,0),         vec3(0,555,0),  vec3(0,0,555),  red));
    world.add(quad(point3(343, 554, 332), vec3(-130,0,0), vec3(0,0,-105), light));
    world.add(quad(point3(0,0,0),         vec3(555,0,0),  vec3(0,0,555),  white));
    world.add(quad(point3(555,555,555),   vec3(-555,0,0), vec3(0,0,-555), white));
    world.add(quad(point3(0,0,555),       vec3(555,0,0),  vec3(0,555,0),  white));

    hittable box1 = box(point3(0,0,0), point3(165,330,165), white);
    box1 = rotate_y(box1, 15);
    box1 = translate(box1, vec3(265,0,295));
    world.add(box1);

    hittable box2 = box(point3(0,0,0), point3(165,165,165), white);
    box2 = rotate_y(box2, -18);
    box2 = translate(box2, vec3(130,0,65));
    world.add(box2);

    camera cam = camera();

    cam.aspect_ratio      = 1.0;
    cam.image_width       = 600;
    cam.samples_per_pixel = 200;
    cam.max_depth         = 50;
    cam.background        = color(0,0,0);

    cam.vfov     = 40;
    cam.lookfrom = point3(278, 278, -800);
    cam.lookat   = point3(278, 278, 0);
    cam.vup      = vec3(0,1,0);

    cam.defocus_angle = 0;

    cam.render(world);
}

@simple_light {
    hittable_list world = hittable_list();

    texture pertext = noise_texture(4);
    world.add(sphere(point3(0,-1000,0), 1000, lambertian(pertext)));
    world.add(sphere(point3(0,2,0), 2, lambertian(pertext)));

    material difflight = diffuse_light(color(4,4,4));
    world.add(sphere(point3(0,7,0), 2, difflight));
    world.add(quad(point3(3,1,-2), vec3(2,0,0), vec3(0,2,0), difflight));

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth         = 50;
    cam.background        = color(0,0,0);

    cam.vfov     = 20;
    cam.lookfrom = point3(26,3,6);
    cam.lookat   = point3(0,2,0);
    cam.vup      = vec3(0,1,0);

    cam.defocus_angle = 0;

    cam.render(world);
}

@quads {
    hittable_list world = hittable_list();

    ## Materials
    material left_red     = lambertian(color(1.0, 0.2, 0.2));
    material back_green   = lambertian(color(0.2, 1.0, 0.2));
    material right_blue   = lambertian(color(0.2, 0.2, 1.0));
    material upper_orange = lambertian(color(1.0, 0.5, 0.0));
    material lower_teal   = lambertian(color(0.2, 0.8, 0.8));

    ## Quads
    world.add(quad(point3(-3,-2, 5), vec3(0, 0,-4), vec3(0, 4, 0), left_red));
    world.add(quad(point3(-2,-2, 0), vec3(4, 0, 0), vec3(0, 4, 0), back_green));
    world.add(quad(point3( 3,-2, 1), vec3(0, 0, 4), vec3(0, 4, 0), right_blue));
    world.add(quad(point3(-2, 3, 1), vec3(4, 0, 0), vec3(0, 0, 4), upper_orange));
    world.add(quad(point3(-2,-3, 5), vec3(4, 0, 0), vec3(0, 0,-4), lower_teal));

    camera cam = camera();

    cam.aspect_ratio      = 1.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 80;
    cam.lookfrom = point3(0,0,9);
    cam.lookat   = point3(0,0,0);
    cam.vup      = vec3(0,1,0);

    cam.defocus_angle = 0;

    cam.render(world);
}

@two_perlin_spheres {
    hittable_list world = hittable_list();

    texture pertext = noise_texture(4);
    world.add(sphere(point3(0, -1000, 0), 1000, lambertian(pertext)));
    world.add(sphere(point3(0, 2, 0), 2, lambertian(pertext)));

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 10;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 20;
    cam.lookfrom = point3(13, 2, 3);
    cam.lookat   = point3(0, 0, 0);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 0;

    cam.render(world);
}

@earth {
    texture  earth_texture = image_texture("earthmap.jpg");
    material earth_surface = lambertian(earth_texture);
    hittable globe         = sphere(point3(0, 0, 0), 2, earth_surface);

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 20;
    cam.lookfrom = point3(12, 0, 0);
    cam.lookat   = point3(0, 0, 0);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 0;

    cam.render(hittable_list(globe));
}

@two_spheres {
    hittable_list world = hittable_list();

    texture checker = checker_texture(0.8, color(0.2, 0.3, 0.1), color(0.9, 0.9, 0.9));

    world.add(sphere(point3(0,-10, 0), 10, lambertian(checker)));
    world.add(sphere(point3(0, 10, 0), 10, lambertian(checker)));

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 20;
    cam.lookfrom = point3(13, 2, 3);
    cam.lookat   = point3(0, 0, 0);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 0;

    cam.render(world);
}

@simple_scene {

    hittable_list world = hittable_list();

    material material_ground = lambertian(color(0.8, 0.8, 0.0));
    material material_center = lambertian(color(0.1, 0.2, 0.5));
    material material_left   = dielectric(1.5);
    material material_right  = metal(color(0.8, 0.6, 0.2), 0.0);

    world.add(sphere(point3( 0.0, -100.5, -1.0), 100.0, material_ground));
    world.add(sphere(point3( 0.0,    0.0, -1.0),   0.5, material_center));
    world.add(sphere(point3(-1.0,    0.0, -1.0),   0.5, material_left));
    world.add(sphere(point3(-1.0,    0.0, -1.0),  -0.4, material_left));
    world.add(sphere(point3( 1.0,    0.0, -1.0),   0.5, material_right));

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 10;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 20;
    cam.lookfrom = point3(-2,2,1);
    cam.lookat   = point3(0,0,-1);
    cam.vup      = vec3(0,1,0);

    cam.defocus_angle = 10.0;
    cam.focus_dist    = 3.4;

    cam.render(world);
}

@random_spheres {

    hittable_list world = hittable_list();

    material ground_material = lambertian(color(0.5, 0.5, 0.5));
    world.add(sphere(point3(0, -1000, 0), 1000, ground_material));

    for (num a = -11; a < 11; a++) {
        for (num b = -11; b < 11; b++) {
            num choose_mat = random();
            point3 center = point3(a + 0.9 * random(), 0.2, b + 0.9 * random());

            if ((center - point3(4, 0.2, 0)).length() > 0.9) {
                material sphere_material;

                if (choose_mat < 0.8) {
                    ## diffuse
                    color albedo = random_vec3() * random_vec3();
                    sphere_material = lambertian(albedo);
                    point3 center2 = center + vec3(0, random(0, 0.5), 0);
                    world.add(sphere(center, center2, 0.2, sphere_material));
                } else if (choose_mat < 0.95) {
                    ## metal
                    color albedo = random_vec3(0.5, 1);
                    num fuzz = random(0, 0.5);
                    sphere_material = metal(albedo, fuzz);
                    world.add(sphere(center, 0.2, sphere_material));
                } else {
                    ## glass
                    sphere_material = dielectric(1.5);
                    world.add(sphere(center, 0.2, sphere_material));
                }
            }
        }
    }

    material material1 = dielectric(1.5);
    world.add(sphere(point3(0, 1, 0), 1.0, material1));

    material material2 = lambertian(color(0.4, 0.2, 0.1));
    world.add(sphere(point3(-4, 1, 0), 1.0, material2));

    material material3 = metal(color(0.7, 0.6, 0.5), 0.0);
    world.add(sphere(point3(4, 1, 0), 1.0, material3));

    camera cam = camera();

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 1200;
    cam.samples_per_pixel = 500;
    cam.max_depth         = 50;
    cam.background        = color(0.70, 0.80, 1.00);

    cam.vfov     = 20;
    cam.lookfrom = point3(13, 2, 3);
    cam.lookat   = point3(0, 0, 0);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 0.6;
    cam.focus_dist    = 10.0;

    cam.render(bvh_node(world));
}
