thing: lambertian : material {
    albedo: color
}

$lambertian (a: color) {
    my.albedo = a;
}

@scatter: bool (r_in: ray, rec: hit_record, attenuation: color, scattered: ray) -> lambertian {
    vec3 scatter_direction = rec.normal + random_unit_vector();

    ## Catch degenerate scatter direction
    if (scatter_direction.near_zero())
        scatter_direction = rec.normal;

    scattered.set(rec.p, scatter_direction, r_in.time());
    attenuation.set(my.albedo);
    ret true;
}


thing: metal : material {
    albedo: color,
    fuzz: num
}

$metal (a: color, f: num) {
    my.albedo = a;
    my.fuzz = f;
}

@scatter: bool (r_in: ray, rec: hit_record, attenuation: color, scattered: ray) -> metal {
    vec3 reflected = reflect(unit_vector(r_in.direction()), rec.normal);
    scattered.set(rec.p, reflected + my.fuzz * random_unit_vector(), r_in.time());
    attenuation.set(my.albedo);
    ret (dot(scattered.direction(), rec.normal) > 0);
}


thing: dielectric : material {
    albedo: color,
    ir: num ## Index of Refraction
}

$dielectric (index_of_refraction: num) {
    my.albedo = color(1, 1, 1);
    my.ir = index_of_refraction;
}

$dielectric (a: color, index_of_refraction: num) {
    my.albedo = a;
    my.ir = index_of_refraction;
}

@scatter: bool (r_in: ray, rec: hit_record, attenuation: color, scattered: ray) -> dielectric {
    attenuation.set(my.albedo);
    num refraction_ratio = rec.front_face ? (1.0 / my.ir) : my.ir;

    vec3 unit_direction = unit_vector(r_in.direction());
    num cos_theta = min(dot(-unit_direction, rec.normal), 1.0);
    num sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    bool cannot_refract = refraction_ratio * sin_theta > 1.0;
    vec3 direction =
    (cannot_refract || reflectance(cos_theta, refraction_ratio) > random())
        ? reflect(unit_direction, rec.normal)
        : refract(unit_direction, rec.normal, refraction_ratio);

    scattered.set(rec.p, direction, r_in.time());
    ret true;
}

@reflectance: num (cosine: num, ref_idx: num) {
    ## Use Schlick's approximation for reflectance.
    num r0 = (1 - ref_idx) / (1 + ref_idx);
    r0 = r0 * r0;
    ret r0 + (1 - r0) * pow((1 - cosine), 5);
}
