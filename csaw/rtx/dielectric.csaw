thing: dielectric : material {
    ir: num  ## Index of Refraction
}

$dielectric (index_of_refraction: num) {
    my.ir = index_of_refraction;
}

@scatter: num (r_in: ray, rec: hit_record, attenuation: vec3, scattered: ray) -> dielectric {
    attenuation.set(1.0, 1.0, 1.0);
    num refraction_ratio = rec.front_face ? (1.0 / my.ir) : my.ir;

    vec3 unit_direction = unit_vector(r_in.direction());
    num cos_theta = min(dot(-unit_direction, rec.normal), 1.0);
    num sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    num cannot_refract = refraction_ratio * sin_theta > 1.0;
    vec3 direction;
    if (cannot_refract || reflectance(cos_theta, refraction_ratio) > random())
        direction = reflect(unit_direction, rec.normal);
    else
        direction = refract(unit_direction, rec.normal, refraction_ratio);

    scattered.set(rec.p, direction);
    ret true;
}

@reflectance: num (cosine: num, ref_idx: num) {
    ## Use Schlick's approximation for reflectance.
    num r0 = (1 - ref_idx) / (1 + ref_idx);
    r0 = r0 * r0;
    ret r0 + (1 - r0) * pow(1 - cosine, 5);
}
